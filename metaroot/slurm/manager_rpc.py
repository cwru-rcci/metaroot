from metaroot.rpc.client import RPCClient
from metaroot.rpc.config import locate_config
from metaroot.common import Result


class SlurmManager(RPCClient):
    """
    RPC wrapper for SlurmManager. Auto-generated by metaroot.utils.create_rpc_wrapper
    """
    def __init__(self):
        super().__init__(locate_config(self.__class__.__name__))

    def add_account(self, account_atts) -> Result:
        request = {'action': 'add_account',
                   'account_atts': account_atts,
                   }
        return self.call(request)

    def add_user(self, user_atts) -> Result:
        request = {'action': 'add_user',
                   'user_atts': user_atts,
                   }
        return self.call(request)

    def associate_user_to_account(self, user_name, account_name) -> Result:
        request = {'action': 'associate_user_to_account',
                   'user_name': user_name,
                   'account_name': account_name,
                   }
        return self.call(request)

    def delete_account(self, name) -> Result:
        request = {'action': 'delete_account',
                   'name': name,
                   }
        return self.call(request)

    def delete_user(self, name) -> Result:
        request = {'action': 'delete_user',
                   'name': name,
                   }
        return self.call(request)

    def disassociate_user_from_account(self, user_name, account_name) -> Result:
        request = {'action': 'disassociate_user_from_account',
                   'user_name': user_name,
                   'account_name': account_name,
                   }
        return self.call(request)

    def disassociate_users_from_account(self, user_names, account_name) -> Result:
        request = {'action': 'disassociate_users_from_account',
                   'user_names': user_names,
                   'account_name': account_name,
                   }
        return self.call(request)

    def exists_account(self, name) -> Result:
        request = {'action': 'exists_account',
                   'name': name,
                   }
        return self.call(request)

    def exists_user(self, name) -> Result:
        request = {'action': 'exists_user',
                   'name': name,
                   }
        return self.call(request)

    def get_account(self, name) -> Result:
        request = {'action': 'get_account',
                   'name': name,
                   }
        return self.call(request)

    def get_members(self, name) -> Result:
        request = {'action': 'get_members',
                   'name': name,
                   }
        return self.call(request)

    def get_user(self, name) -> Result:
        request = {'action': 'get_user',
                   'name': name,
                   }
        return self.call(request)

    def set_user_default_account(self, user_name, account_name) -> Result:
        request = {'action': 'set_user_default_account',
                   'user_name': user_name,
                   'account_name': account_name,
                   }
        return self.call(request)

    def update_account(self, account_atts) -> Result:
        request = {'action': 'update_account',
                   'account_atts': account_atts,
                   }
        return self.call(request)

    def update_user(self, user_atts) -> Result:
        request = {'action': 'update_user',
                   'user_atts': user_atts,
                   }
        return self.call(request)
